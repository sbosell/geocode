@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="page-header">
<div class="container">
    <h1>Multi Geocoder Example<small><a href="http://github.com/sbosell/geocoder">http://github.com/sbosell/geocoder</a></small></h1>
</div>
</div>
<div class="content">
    <div class="jumbotron container">
        <p>
            These examples make an api post back to a simple controller which returns the geocoded result.  
            Try querying springfield on the google or paris to see multiple results.  The red icon is the first result.
<br /><br />
            ps.  There is a nodejs demo:  <a href="http://geocodenode.azurewebsites.net" target="_blank">http://geocodenode.azurewebsites.net</a>
        </p>
        <div class="">
            <form>
                <div class="form-group">
                    <label >Address</label>
                    @Html.TextBox("Address", "Austin, TX", new {@class="form-control"})
                </div>
                <div class="form-group">
                    <label>Geo Provider</label>
                    @Html.DropDownList("Providers", (List<SelectListItem>
                        ) ViewBag.Providers, new {@class="form-control"})
                </div>
               <div class="form-group">
                   Apikey: @Html.TextBox("ApiKey", "", new {@class="nokey form-control"}) <span id="apikeytext">Not Required</span>
               </div>
                    
                    <button id="doit" class="btn btn-success">Get Coordinates</button>
            </form>
        </div>
        <div id="results">
            Latitude: <span id="latitude" class="label label-default"></span>
            Longitude: <span id="longitude" class="label label-default"></span>
        </div>
        <div id="message">

        </div>

        <div id="map"></div>
    </div>
</div>

<div id="code" class="container">
    Here is the controller that does all the magic:


    <!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
    <span class="kwrd">public</span> ActionResult Query(FormCollection collection)
        {
            <span class="kwrd">string</span> key = <span class="kwrd">string</span>.Empty;
            <span class="kwrd">string</span> query = <span class="kwrd">string</span>.Empty;
            <span class="kwrd">string</span> provider = <span class="str">"Google"</span>;
            IGeoProviderConfig config;
            IGeoProvider GeoProvider = <span class="kwrd">null</span>;

           IGeoCodeResult result = <span class="kwrd">new</span> GeoCodeResult();
            <span class="kwrd">if</span> (collection.HasKeys() &amp;&amp; collection[<span class="str">"Query"</span>] != <span class="kwrd">null</span> &amp;&amp; collection[<span class="str">"Providers"</span>]!=<span class="kwrd">null</span>)
            {
                query = collection[<span class="str">"Query"</span>];
                <span class="rem">// we have a search</span>
                provider = collection[<span class="str">"Providers"</span>].Replace(<span class="str">"KEY"</span>, <span class="str">""</span>);
                <span class="kwrd">if</span> (collection[<span class="str">"Providers"</span>] != <span class="kwrd">null</span> &amp;&amp; collection[<span class="str">"Providers"</span>].ToString().Contains(<span class="str">"KEY"</span>))
                {
                    key = collection[<span class="str">"Key"</span>];
                }

                <span class="kwrd">switch</span> (provider)  {
                    <span class="kwrd">case</span> <span class="str">"Google"</span>:
                        config = <span class="kwrd">new</span> GoogleGmapConfig();
                        GeoProvider = <span class="kwrd">new</span> GoogleGmap(config);
                    <span class="kwrd">break</span>;
                    <span class="kwrd">case</span> <span class="str">"Bing"</span>:
                        config = <span class="kwrd">new</span> BingMapConfig().SetKey(key);
                        GeoProvider = <span class="kwrd">new</span> BingMap(config);
                    <span class="kwrd">break</span>;
                    <span class="kwrd">case</span> <span class="str">"MapQuest"</span>:
                    config = <span class="kwrd">new</span> MapQuestConfig().SetKey(key);
                    GeoProvider = <span class="kwrd">new</span> MapQuestMap(config);
                        <span class="kwrd">break</span>;
                    <span class="kwrd">case</span> <span class="str">"Open Streets"</span>:
                        config = <span class="kwrd">new</span> OpenStreetMapConfig().SetUserAgent(<span class="str">"your email here yo"</span>);
                        GeoProvider = <span class="kwrd">new</span> OpenStreetMap(config);
                    <span class="kwrd">break</span>;
                    <span class="kwrd">case</span> <span class="str">"YahooPlaces"</span>:
                        config = <span class="kwrd">new</span> YahooPlaceFinderConfig().SetKey(key);
                        GeoProvider = <span class="kwrd">new</span> YahooPlaceFinder(config);
                    <span class="kwrd">break</span>;
                    <span class="kwrd">case</span> <span class="str">"CloudMade"</span>:
                        config = <span class="kwrd">new</span> CloudMadeConfig().SetKey(key);
                        GeoProvider = <span class="kwrd">new</span> CloudMade(config);
                    <span class="kwrd">break</span>;

                }

                GeoProvider = GeoProvider != <span class="kwrd">null</span> ? GeoProvider : <span class="kwrd">new</span> GoogleGmap();

                GeoCoder gc = <span class="kwrd">new</span> GeoCoder(GeoProvider);

                result = gc.GetCoordinates(query);
               

            }

            <span class="kwrd">return</span> Json(result);
        }</pre>


</div>
